
-- /SBA: Program Details -------------------------------------------------------
-- Program:Routines for I2C IPCORE
-- Version:0.1
-- Date: 20151218
-- Author: Juan S. Vega Martinez
-- Description: Routines for the use the I2C IPCORE. These are I2Cwait, I2CWritebyte,
--              I2CReadbyte, I2CWritebytes, I2CReadbytes and I2CLoadbyteToMEMORY.
-- /SBA: End -------------------------------------------------------------------

-- /SBA: User Registers and Constants ------------------------------------------
   constant ms : integer := integer(real(sysfrec)/real(1000)+0.499)-1;
   variable DlyReg_1ms  : unsigned(15 downto 0);  -- Delay 16 bit register
   variable Dlytmp_ms  : unsigned(15 downto 0);   -- Delay 16 bit register
   constant I2C_TXSTA   : integer:=15;				        --Tx Ready
   constant I2C_RXSTA   : integer:=14;				        --Rx Ready
   constant I2C_ReadMEMORY   : unsigned(7 downto 0):=x"08"; --Enable Read Data from internal memory
   variable I2C_DEVICE_ADR   : unsigned(7 downto 0);     	--I2C Address Device
   variable I2C_DAT          : unsigned(7 downto 0);     	--Data to Write or Read
   variable I2C_ADR_REG      : unsigned(7 downto 0);     	--Initial address register to Write or Read
   variable I2C_NumberBytesRead: unsigned(7 downto 0);		--Number of bytes to Write or Read
   variable I2C_ADR_MEMORY   : unsigned(7 downto 0);        --Address Memory to Multiple Write
   variable I2CFlg           : std_logic;	                --Flag status

-- /SBA: End -------------------------------------------------------------------

-- /SBA: User Program ----------------------------------------------------------

-- /L:I2Cwait
-- Read Status I2C Module
=> SBARead(I2C_REG0);
=> I2CFlg := dati(I2C_TXSTA) or dati(I2C_RXSTA);
=> if I2CFlg ='1' then
     SBARead(I2C_REG0);
     SBAjump(I2Cwait+1);
   else SBARet;
   end if;

--___________________________ Init:I2CWriteByte Routine _________________________
-- /L:I2CWritebyte
=> SBARead(I2C_REG0);                                 -- Read Status I2C Module
=> I2CFlg := dati(I2C_TXSTA) or dati(I2C_RXSTA);
=> if I2CFlg ='1' then
     SBARead(I2C_REG0);
     SBAjump(I2CWritebyte+1);
   end if;
=> SBAWrite(I2C_REG3,x"00" & I2C_DAT);           -- x"00"& I2C_DAT --> x"00"   = position within the RAM
                				                 --                --> I2C_DAT = Data to write
=> SBAWrite(I2C_REG2,x"0000");                   -- Write One Byte
=> SBAWrite(I2C_REG1,x"00" & I2C_ADR_REG);       -- I2C_ADR_REG --> Initial register address
=> SBAWrite(I2C_REG0,I2C_DEVICE_ADR & x"01" );   -- I2C_DEVICE_ADR & 000000011
                                                 --                  000000011 = "000000" & Write & Start
=> SBAwait;
=> SBARet;                                       -- Return
--___________________________ End:I2CWriteByte Routine ___________________________

--___________________________ Init:I2CReadByte Routine ___________________________
-- /L:I2CReadbyte
=> SBARead(I2C_REG0);                                -- Read Status I2C Module
=> I2CFlg := dati(I2C_TXSTA) or dati(I2C_RXSTA);
=> if I2CFlg ='1' then
     SBARead(I2C_REG0);
     SBAjump(I2CReadbyte+1);
   end if;
=> SBAWrite(I2C_REG2,x"0000");                   -- Read One byte
=> SBAWrite(I2C_REG1,x"00" & I2C_ADR_REG);       -- I2C_ADR_REG(Initial  address register)
=> SBAWrite(I2C_REG0, I2C_DEVICE_ADR & x"03" );  -- I2C_DEVICE_ADR & 000000011
                                                 --                  000000011 = "000000" & Write & Start
=> SBAwait;
=> SBARead(I2C_REG0);                                 -- Read Status I2C Module
=> I2CFlg := dati(I2C_TXSTA) or dati(I2C_RXSTA);
=> if I2CFlg ='1' then
     SBARead(I2C_REG0);
     SBAjump(I2CReadbyte+8);
   end if;
=> SBAWrite(I2C_REG0,x"00" & I2C_ReadMEMORY);    -- Enable read memory RAM
=> SBAwait;
=> SBARead(I2C_REG0);
=> SBAwait; I2C_DAT:= dati(7 downto 0);          -- Save
=> SBARet;                                       -- Return
--___________________________ End:I2CReadByte Routine ___________________________

--_________________________ Init:I2CwriteBytes Routine __________________________
-- /L:I2CWritebytes
=> if (I2C_ADR_MEMORY>0) then dec(I2C_ADR_MEMORY);
   else SBARet;
   end if;
=> SBAWrite(I2C_REG2,x"00" & I2C_ADR_MEMORY);     -- Write the number of bytes
=> SBAWrite(I2C_REG1,x"00" & I2C_ADR_REG);        -- Initial  address register to Write
=> SBAWrite(I2C_REG0,I2C_DEVICE_ADR & x"01" );    -- I2C_DEVICE_ADR & 000000001
                                                  --                  000000001 = "000000" & Write & Start
=> SBAwait;
=> clr(I2C_ADR_MEMORY);
   SBARet;                                        -- Return
--_________________________ End:I2CwriteBytes Routine __________________________

--__________________________ Init:I2CreadBytes Routine __________________________
-- /L:I2CReadbytes
=> if (I2C_NumberBytesRead>0) then dec(I2C_NumberBytesRead);
   else SBARet;
   end if;
=> SBAWrite(I2C_REG2,x"00" & I2C_NumberBytesRead); -- Read the number of bytes
=> SBAWrite(I2C_REG1,x"00" & I2C_ADR_REG);         -- Initial  address register
=> SBAWrite(I2C_REG0, I2C_DEVICE_ADR & x"03" );    -- I2C_DEVICE_ADR & 000000011
                                                   --                  000000011 = "000000" & Write & Start
=> SBAwait;
=> SBARead(I2C_REG0);                                   -- Read Status I2C Module
=> I2CFlg := dati(I2C_TXSTA) or dati(I2C_RXSTA);
=> if I2CFlg ='1' then
     SBARead(I2C_REG0);
     SBAjump(I2CReadbytes+6);
   end if;
=> SBAWrite(I2C_REG0,x"00" & I2C_ReadMEMORY);      -- Enable read memory RAM
=> clr(I2C_NumberBytesRead);
   SBAwait;
   SBARet;
--__________________________ End:I2CreadBytes Routine __________________________

--_________________________ Init:I2CLoadByteToMEMORY Routine __________________________

-- /L:I2CLoadbyteToMEMORY
=> SBAWrite(I2C_REG3,I2C_ADR_MEMORY & I2C_DAT);
=> inc(I2C_ADR_MEMORY); SBARet;                                      -- Return
--__________________________ End:I2CLoadbyteToMEMORY Routine __________________________

-- /SBA: End -------------------------------------------------------------------
